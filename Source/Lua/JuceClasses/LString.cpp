#include "stdafx.h"
#include "LString.h"

void LString::wrapForLua (lua_State *L)
{
	using namespace luabind;

	module(L)
    [
		class_<String>("String")
			.def(constructor<const char *>())
			.def(constructor<const char *, const int>())
			.def(constructor<double>())
			.def(constructor<double,int>())
			.def(self + other<const String &>())
			.def("hashCode", &String::hashCode)
			.def("length", &String::length)
			.def("append", &String::append)
			.def("isEmpty", &String::isEmpty)
			.def("isNotEmpty", &String::isNotEmpty)
			.def("equalsIgnoreCase", (bool (String::*)(const String &) const) &String::equalsIgnoreCase)
			.def("equalsIgnoreCase", (bool (String::*)(const char *) const) &String::equalsIgnoreCase)
			.def("compare", (int (String::*)(const String &) const) &String::compare)
			.def("compare", (int (String::*)(const char *) const) &String::compare)
			.def("compareIgnoreCase", (int (String::*)(const String &) const) &String::compareIgnoreCase)
			.def("compareIgnoreCase", (int (String::*)(const char *) const) &String::compareIgnoreCase)
			.def("compareLexicographically", (int (String::*)(const String &) const) &String::compareLexicographically)
			.def("startsWith", (bool (String::*)(const String &) const) &String::startsWith)
			.def("startsWithIgnoreCase", (bool (String::*)(const String &) const) &String::startsWithIgnoreCase)
			.def("endsWith",  &String::endsWith)
			.def("contains",  &String::contains)
			.def("containsIgnoreCase", &String::containsIgnoreCase)
			.def("containsWholeWord", &String::containsWholeWord)
			.def("containsWholeWordIgnoreCase", &String::containsWholeWordIgnoreCase)
			.def("indexOfWholeWord", &String::indexOfWholeWord)
			.def("indexOfWholeWordIgnoreCase", &String::indexOfWholeWordIgnoreCase)
			.def("containsAnyOf", &String::containsAnyOf)
			.def("containsOnly", &String::containsOnly)
			.def("containsNonWhitespaceChars", &String::containsNonWhitespaceChars)
			.def("matchesWildcard", &String::matchesWildcard)
			.def("indexOfAnyOf", &String::indexOfAnyOf)
			.def("indexOf", (int (String::*)(StringRef) const) &String::indexOf)
			.def("indexOf", (int (String::*)(const int, StringRef) const) &String::indexOf)
			.def("indexOfIgnoreCase", (int (String::*)(StringRef) const) &String::indexOfIgnoreCase)
			.def("lastIndexOf", &String::lastIndexOf)
			.def("lastIndexOfIgnoreCase", &String::lastIndexOfIgnoreCase)
			.def("lastIndexOfAnyOf", &String::lastIndexOfAnyOf)
			.def("substring", (String (String::*)(int,int) const) &String::substring)
			.def("substring", (String (String::*)(int) const) &String::substring)
			.def("dropLastCharacters", &String::dropLastCharacters)
			.def("getLastCharacters", &String::getLastCharacters)
			.def("fromFirstOccurrenceOf", &String::fromFirstOccurrenceOf)
			.def("fromLastOccurrenceOf", &String::fromLastOccurrenceOf)
			.def("upToFirstOccurrenceOf", &String::upToFirstOccurrenceOf)
			.def("upToLastOccurrenceOf", &String::upToLastOccurrenceOf)
			.def("trim", &String::trim)
			.def("trimEnd", &String::trimEnd)
			.def("trimCharactersAtStart", &String::trimCharactersAtStart)
			.def("trimCharactersAtEnd", &String::trimCharactersAtEnd)
			.def("toUpperCase", &String::toUpperCase)
			.def("toLowerCase", &String::toLowerCase)
			.def("replaceSection", &String::replaceSection)
			.def("replace", &String::replace)
			.def("replaceCharacters", &String::replaceCharacters)
			.def("retainCharacters", &String::retainCharacters)
			.def("removeCharacters", &String::removeCharacters)
			.def("initialSectionContainingOnly", &String::initialSectionContainingOnly)
			.def("initialSectionNotContaining", &String::initialSectionNotContaining)
			.def("isQuotedString", &String::isQuotedString)
			.def("unquoted", &String::unquoted)
			.def("quoted", &String::quoted)
			.def("repeatedString", &String::repeatedString)
			.def("paddedLeft", &String::paddedLeft)
			.def("paddedRight", &String::paddedRight)
			.def("getIntValue", &String::getIntValue)
			.def("getTrailingIntValue", &String::getTrailingIntValue)
			.def("getFloatValue", &String::getFloatValue)
			.def("getDoubleValue", &String::getDoubleValue)
			.def("getHexValue32", &String::getHexValue32)
			.def("swapWith", &String::swapWith)
			.def("toUTF8", &String::toUTF8)
		,

		class_<CharPointer_UTF8>("CharPointer_UTF8")
			.def("getAddress", &CharPointer_UTF8::getAddress)
		,
		class_<CharPointer_UTF8::CharType>("CharType")
		,
		class_<StringPairArray>("StringPairArray")
			.def("getValue", &StringPairArray::getValue)
			.def("getAllKeys", &StringPairArray::getAllKeys)
			.def("getAllValues", &StringPairArray::getAllValues)
			.def("size", &StringPairArray::size)
			.def("set", &StringPairArray::set)
			.def("addArray", &StringPairArray::addArray)
			.def("clear", &StringPairArray::clear)
			.def("remove", (void (StringPairArray::*)(int)) &StringPairArray::remove)
			//.def("remove", (void (StringPairArray::*)(const String &))&StringPairArray::remove)
			.def("setIgnoresCase", &StringPairArray::setIgnoresCase)
			.def("getDescription", &StringPairArray::getDescription)
			.def("minimiseStorageOverheads", &StringPairArray::minimiseStorageOverheads)

		,
        class_<StringRef>("StringRef")
            .def(constructor<>())
            .def(constructor<const char *>())
            .def(constructor<const String &>())
        ,
		class_<StringArray, LStringArray>("StringArray")
			.def(constructor<>())
			.def(constructor<const String &>())
			.def(constructor<const char *const *, const int>())
			.def(constructor<const char *const *>())
			.def("size", &StringArray::size)
			.def("get", &LStringArray::get)
			.def("contains", &StringArray::contains)
			.def("indexOf", &StringArray::indexOf)
			.def("getReference", &StringArray::getReference)
			.def("add", (void (StringArray::*)(const String &))&StringArray::add)
			.def("insert", &StringArray::insert)
			.def("addIfNotAlreadyThere", &StringArray::addIfNotAlreadyThere)
			.def("set", &StringArray::set)
			.def("addArray", &StringArray::addArray)
			.def("addTokens", (int (StringArray::*)(StringRef, bool)) &StringArray::addTokens)
			.def("addTokens", (int (StringArray::*)(StringRef, StringRef, StringRef)) &StringArray::addTokens)
			.def("addLines", &StringArray::addLines)
			.def("clear", &StringArray::clear)
			.def("remove", &StringArray::remove)
			.def("removeString", &StringArray::removeString)
			.def("removeRange", &StringArray::removeRange)
			.def("removeDuplicates", &StringArray::removeDuplicates)
			.def("removeEmptyStrings", &StringArray::removeEmptyStrings)
			.def("move", &StringArray::move)
			.def("trim", &StringArray::trim)
			.def("appendNumbersToDuplicates", &StringArray::appendNumbersToDuplicates)
			.def("joinIntoString", &StringArray::joinIntoString)
			.def("sort", &StringArray::sort)
			.def("minimiseStorageOverheads", &StringArray::minimiseStorageOverheads)
		];
}
